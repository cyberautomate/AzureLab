{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.34.44.8038",
      "templateHash": "15610092275640993717"
    }
  },
  "parameters": {
    "namePrefix": {
      "type": "string",
      "metadata": {
        "description": "Prefix for naming resources"
      }
    },
    "environment": {
      "type": "string",
      "defaultValue": "dev",
      "metadata": {
        "description": "Environment short name (e.g., dev, test, prod)"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for the Key Vault"
      }
    },
    "skuName": {
      "type": "string",
      "defaultValue": "standard",
      "allowedValues": [
        "standard",
        "premium"
      ],
      "metadata": {
        "description": "Key Vault SKU name (standard or premium)"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Tags to apply to the Key Vault"
      }
    },
    "accessPolicies": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Array of access policy objects (tenantId, objectId, permissions)"
      }
    },
    "enablePurgeProtection": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable purge protection (cannot be disabled once enabled)"
      }
    },
    "enableSoftDelete": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable soft delete (always on for newer API versions, kept for clarity)"
      }
    },
    "publicNetworkAccess": {
      "type": "string",
      "defaultValue": "Enabled",
      "allowedValues": [
        "Enabled",
        "Disabled"
      ],
      "metadata": {
        "description": "Public network access (Enabled or Disabled)"
      }
    },
    "enableRbacAuthorization": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional RBAC authorization usage flag (if true, accessPolicies should normally be empty)"
      }
    }
  },
  "variables": {
    "vaultName": "[toLower(replace(format('{0}-{1}-kv', parameters('namePrefix'), parameters('environment')), '--', '-'))]",
    "computedAccessPolicies": "[if(parameters('enableRbacAuthorization'), createArray(), parameters('accessPolicies'))]"
  },
  "resources": [
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-07-01",
      "name": "[variables('vaultName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "tenantId": "[subscription().tenantId]",
        "sku": {
          "family": "A",
          "name": "[parameters('skuName')]"
        },
        "enablePurgeProtection": "[parameters('enablePurgeProtection')]",
        "enableSoftDelete": "[parameters('enableSoftDelete')]",
        "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
        "enableRbacAuthorization": "[parameters('enableRbacAuthorization')]",
        "accessPolicies": "[variables('computedAccessPolicies')]"
      }
    }
  ],
  "outputs": {
    "keyVaultId": {
      "type": "string",
      "value": "[resourceId('Microsoft.KeyVault/vaults', variables('vaultName'))]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[variables('vaultName')]"
    },
    "keyVaultUri": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('vaultName')), '2023-07-01').vaultUri]"
    }
  }
}